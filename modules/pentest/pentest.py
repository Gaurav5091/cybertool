from .nmap_scan import NmapScanner
from .subdomains import SubdomainEnumerator
from .dir_brute import DirectoryBruteForcer
from .exploits import ExploitTester
from .linpeas import CustomLinPEAS
from urllib.parse import urlparse
import os

class PentestAutomation:
    def __init__(self, target_url, advanced=False, anonymous=False, use_tor=False):
        self.target_url = target_url
        self.target = urlparse(target_url).hostname
        self.advanced = advanced
        self.anonymous = anonymous
        self.use_tor = use_tor
        self.findings = []

    def run(self):
        """Run all pentest automation tasks"""
        # Nmap scan
        nmap_scanner = NmapScanner(self.target, self.advanced, self.anonymous, self.use_tor)
        nmap_findings = nmap_scanner.scan()
        self.findings.extend(nmap_findings)

        # Subdomain enumeration
        subdomain_enum = SubdomainEnumerator(self.target_url, self.advanced)
        self.findings.extend(subdomain_enum.enumerate())

        # Directory brute-forcing
        dir_brute = DirectoryBruteForcer(self.target_url)
        self.findings.extend(dir_brute.brute_force())

        # Exploit testing
        exploit_tester = ExploitTester(self.target_url, nmap_findings, self.advanced)
        self.findings.extend(exploit_tester.test_exploits())

        # LinPEAS (runs locally, only if on Linux)
        if self.advanced and os.name == "posix":
            linpeas = CustomLinPEAS()
            self.findings.extend(linpeas.run())

        return self.findings
