import dns.resolver
import requests
import subprocess
from config import SUBDOMAIN_FILE, TIMEOUT
from urllib.parse import urlparse

class SubdomainEnumerator:
    def __init__(self, target_url, advanced=False):
        self.target = urlparse(target_url).hostname
        self.advanced = advanced
        self.findings = []

    def run_amass(self):
        """Run Amass for passive/active subdomain enumeration"""
        print(f"[*] Running Amass enumeration for {self.target}...")
        try:
            cmd = ["amass", "enum", "-d", self.target, "-passive"]
            if self.advanced:
                cmd = ["amass", "enum", "-d", self.target, "-brute", "-w", SUBDOMAIN_FILE]
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.stdout:
                for line in result.stdout.splitlines():
                    if "." in line and self.target in line:
                        self.findings.append(f"Subdomain: {line.strip()} - Discovered by Amass")
            if result.stderr:
                self.findings.append(f"Amass: Error - {result.stderr.strip()}")
        except FileNotFoundError:
            self.findings.append("Amass: Not installed or not in PATH")
        except Exception as e:
            self.findings.append(f"Amass: Failed - {str(e)}")

    def enumerate(self):
        """Enumerate subdomains using Amass, DNS, and HTTP checks"""
        print(f"[*] Enumerating subdomains for {self.target}...")
        
        # Run Amass first
        self.run_amass()

        # Load wordlist for additional checks
        try:
            with open(SUBDOMAIN_FILE, "r") as f:
                subdomains = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.findings.append("Subdomain: Wordlist file not found")
            return self.findings

        # DNS and HTTP verification
        resolver = dns.resolver.Resolver()
        for sub in subdomains:
            subdomain = f"{sub}.{self.target}"
            if any(subdomain in finding for finding in self.findings):
                continue
            try:
                answers = resolver.resolve(subdomain, "A")
                ip = answers[0].address
                self.findings.append(f"Subdomain: {subdomain} - Resolved to {ip}")
                if self.advanced:
                    url = f"http://{subdomain}"
                    try:
                        response = requests.get(url, timeout=TIMEOUT)
                        if response.status_code == 200:
                            self.findings.append(f"Subdomain: {url} - Active (HTTP 200)")
                    except requests.RequestException:
                        pass
            except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer, dns.resolver.Timeout):
                continue

        return self.findings
