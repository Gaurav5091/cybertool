import nmap
import subprocess
import re

class NmapScanner:
    def __init__(self, target, advanced=False, anonymous=False, use_tor=False):
        self.target = target
        self.advanced = advanced
        self.anonymous = anonymous
        self.use_tor = use_tor
        self.findings = []

    def scan(self):
        """Run Nmap scan with specified options"""
        nm = nmap.PortScanner()
        mode = "(Anonymous Mode)" if self.anonymous else ""
        if self.use_tor:
            mode += " (via Tor)"
        print(f"[*] Running Nmap scan on {self.target} {mode}...")
        try:
            args = "-sS -T4"
            if self.advanced:
                args = "-A -p- -T4"
            if self.anonymous and not self.use_tor:
                args += " -D RND:20 -f -T2 --source-port 80"

            if self.use_tor:
                cmd = f"proxychains nmap {args} {self.target}"
                process = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                self.parse_nmap_output(process.stdout)
            else:
                nm.scan(self.target, arguments=args)
                self.parse_nmap_results(nm)
        except Exception as e:
            self.findings.append(f"Nmap: Scan failed - {str(e)}")
        return self.findings

    def parse_nmap_results(self, nm):
        """Parse python-nmap results"""
        for host in nm.all_hosts():
            if nm[host].state() == "up":
                self.findings.append(f"Nmap: Host {host} is up")
                for proto in nm[host].all_protocols():
                    ports = nm[host][proto].keys()
                    for port in ports:
                        state = nm[host][proto][port]['state']
                        service = nm[host][proto][port].get('name', 'unknown')
                        version = nm[host][proto][port].get('product', '') + " " + nm[host][proto][port].get('version', '')
                        self.findings.append(f"Nmap: Port {port}/{proto} {state} - {service} ({version})")
                if self.advanced and 'osmatch' in nm[host]:
                    for os in nm[host]['osmatch']:
                        self.findings.append(f"Nmap: Possible OS - {os['name']} ({os['accuracy']}% accuracy)")

    def parse_nmap_output(self, output):
        """Parse raw Nmap output from Tor/Proxychains"""
        lines = output.splitlines()
        host = None
        in_script_section = False
        script_name = None

        for line in lines:
            if line.startswith("[proxychains]"):
                continue
            host_match = re.match(r"Nmap scan report for (.*) \((\d+\.\d+\.\d+\.\d+)\)", line)
            if host_match:
                host = host_match.group(2) if host_match.group(2) else host_match.group(1)
                self.findings.append(f"Nmap: Host {host} is up")
                continue
            port_match = re.match(r"(\d+)/(tcp|udp)\s+(\w+)\s+(\w+)(?:\s+(.*))?", line)
            if port_match:
                port, proto, state, service, version = port_match.groups()
                version = version.strip() if version else ""
                self.findings.append(f"Nmap: Port {port}/{proto} {state} - {service} ({version})")
                continue
            os_match = re.match(r"OS details: (.*)", line)
            if os_match:
                self.findings.append(f"Nmap: Possible OS - {os_match.group(1)}")
                continue
            os_cpe_match = re.match(r"OS CPE: (.*)", line)
            if os_cpe_match:
                self.findings.append(f"Nmap: OS CPE - {os_cpe_match.group(1)}")
                continue
            if self.advanced and (line.strip().startswith("|_") or line.strip().startswith("| ")):
                if line.strip().startswith("| "):
                    script_name = line.strip()[2:].split(":")[0].strip()
                    in_script_section = True
                if in_script_section and script_name:
                    self.findings.append(f"Nmap: Script {script_name} - {line.strip()}")
                continue
            elif in_script_section and not line.strip():
                in_script_section = False
                script_name = None
