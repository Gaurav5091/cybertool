import os
import subprocess
import pwd
import re

class CustomLinPEAS:
    def __init__(self):
        self.findings = []

    def run_command(self, cmd):
        """Execute a shell command and return output"""
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return result.stdout.strip(), result.stderr.strip()
        except Exception as e:
            return "", f"Error: {str(e)}"

    def system_info(self):
        """Gather basic system information"""
        print("[*] Collecting system information...")
        uname, _ = self.run_command("uname -a")
        if uname:
            self.findings.append(f"System: Kernel - {uname}")
        release, _ = self.run_command("cat /etc/*release")
        if release:
            self.findings.append(f"System: OS - {release.splitlines()[0]}")
        whoami, _ = self.run_command("whoami")
        if whoami:
            self.findings.append(f"System: Current User - {whoami}")

    def check_suid_guid(self):
        """Check for SUID/GUID binaries"""
        print("[*] Checking SUID/GUID binaries...")
        suid_cmd = "find / -perm -4000 2>/dev/null"
        guid_cmd = "find / -perm -2000 2>/dev/null"
        suid_output, _ = self.run_command(suid_cmd)
        guid_output, _ = self.run_command(guid_cmd)

        common_suid = ["/usr/bin/passwd", "/usr/bin/sudo", "/bin/su"]
        for binary in suid_output.splitlines():
            if binary and binary not in common_suid:
                self.findings.append(f"PrivEsc: SUID Binary - {binary} (Potential escalation vector)")
        for binary in guid_output.splitlines():
            if binary:
                self.findings.append(f"PrivEsc: GUID Binary - {binary} (Potential escalation vector)")

    def check_writable_files(self):
        """Check for writable sensitive files"""
        print("[*] Checking writable sensitive files...")
        files = ["/etc/passwd", "/etc/shadow", "/etc/sudoers"]
        for file in files:
            if os.access(file, os.W_OK):
                self.findings.append(f"PrivEsc: Writable File - {file} (Critical misconfiguration)")

    def check_sudo_perms(self):
        """Check sudo permissions"""
        print("[*] Checking sudo permissions...")
        sudo_output, _ = self.run_command("sudo -l 2>/dev/null")
        if sudo_output and "ALL" in sudo_output:
            self.findings.append("PrivEsc: Sudo - User has full sudo privileges")
        elif sudo_output and "NOPASSWD" in sudo_output:
            self.findings.append("PrivEsc: Sudo - NOPASSWD detected (Escalation possible)")
        elif sudo_output:
            self.findings.append(f"PrivEsc: Sudo - Limited privileges: {sudo_output}")

    def check_cron_jobs(self):
        """Check for cron jobs with writable scripts"""
        print("[*] Checking cron jobs...")
        cron_dirs = ["/etc/crontab", "/etc/cron.d/", "/etc/cron.daily/", "/etc/cron.hourly/"]
        for cron in cron_dirs:
            if os.path.exists(cron):
                if os.access(cron, os.W_OK):
                    self.findings.append(f"PrivEsc: Writable Cron - {cron} (Potential escalation)")
                if os.path.isdir(cron):
                    for root, _, files in os.walk(cron):
                        for file in files:
                            full_path = os.path.join(root, file)
                            if os.access(full_path, os.W_OK):
                                self.findings.append(f"PrivEsc: Writable Cron Script - {full_path}")

    def check_services(self):
        """Check running services for potential exploits"""
        print("[*] Checking running services...")
        services, _ = self.run_command("ps aux")
        if services:
            for line in services.splitlines():
                if "root" in line and any(s in line for s in ["httpd", "apache", "sshd", "mysqld"]):
                    self.findings.append(f"PrivEsc: Service - {line.strip()} (Running as root, investigate)")

    def check_kernel_exploits(self):
        """Check kernel version for known exploits"""
        print("[*] Checking kernel for known exploits...")
        kernel, _ = self.run_command("uname -r")
        if kernel:
            vulnerable_kernels = ["2.6.32", "3.10.0", "4.4.0"]
            if any(k in kernel for k in vulnerable_kernels):
                self.findings.append(f"PrivEsc: Kernel - {kernel} (Potentially vulnerable, check exploits)")

    def run(self):
        """Run all LinPEAS-like checks"""
        print("[*] Starting custom LinPEAS checks...")
        self.system_info()
        self.check_suid_guid()
        self.check_writable_files()
        self.check_sudo_perms()
        self.check_cron_jobs()
        self.check_services()
        self.check_kernel_exploits()
        return self.findings
